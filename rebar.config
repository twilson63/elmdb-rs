%% Rebar3 configuration for elmdb-rs project

%% Erlang compiler options
{erl_opts, [debug_info]}.

%% Dependencies
{deps, []}.

%% Plugins
{plugins, [
    {rebar3_cargo, "0.1.1"}
]}.

%% Build hooks
{provider_hooks, [
    {pre, [
        {compile, {cargo, build}}
    ]},
    {post, [
        {clean, {cargo, clean}}
    ]}
]}.

%% Cargo configuration
{cargo_opts, [
    {src_dir, "native/elmdb_nif"},
    {cargo_args, ["--release"]}
]}.

%% Pre/Post compile hooks
{pre_hooks, [
    {compile, "mkdir -p priv/"}
]}.

{post_hooks, [
    {"(linux|darwin|solaris|freebsd)", compile, 
     "sh -c 'find native/elmdb_nif/target -name \"libelmdb_nif.*\" -type f ! -path \"*/deps/*\" | head -1 | xargs -I {} cp {} priv/ && "
     "cd priv && "
     "for ext in so dylib; do "
     "  if [ -f libelmdb_nif.$ext ]; then "
     "    ln -sf libelmdb_nif.$ext elmdb_nif.so 2>/dev/null || true; "
     "    ln -sf libelmdb_nif.$ext libelmdb_nif.so 2>/dev/null || true; "
     "  fi; "
     "done'"},
    {"win32", compile, 
     "powershell -Command \"Copy-Item -Path 'native\\elmdb_nif\\target\\release\\elmdb_nif.dll' -Destination 'priv\\' -Force\""}
]}.

%% Test configuration
{eunit_opts, [
    verbose,
    {report, {eunit_surefire, [{dir, "_build/test/logs"}]}}
]}.

{eunit_compile_opts, [
    {src_dirs, ["src", "test"]}
]}.

%% Shell configuration
{shell, [
    {config, "config/sys.config"},
    {apps, [elmdb]}
]}.

%% Coverage analysis
{cover_enabled, true}.
{cover_opts, [verbose]}.

%% Profiles for different build configurations
{profiles, [
    {prod, [
        {cargo_opts, [
            {src_dir, "native/elmdb_nif"},
            {cargo_args, ["--release", "--", "--emit=asm"]}
        ]},
        {erl_opts, [no_debug_info]}
    ]},
    {test, [
        {deps, []},
        {erl_opts, [debug_info, export_all]}
    ]}
]}.